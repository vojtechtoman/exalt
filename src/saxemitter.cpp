/***************************************************************************
    saxemitter.cpp  -  Definition of SAXEmitter class methods
                             -------------------
    begin                : June 21 2002
    copyright            : (C) 2003 by Vojtìch Toman
    email                : vtoman@lit.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*!
  \file saxemitter.cpp
  \brief Definition of SAXEmitter class methods.
  
  This file contains the definition of SAXEmitter class methods.
*/


#ifdef __GNUG__
#pragma implementation
#endif


#include "saxemitter.h"


/*!
  \brief Call given method of the receptor in a safe way.
  Calls the method \a x of the saxReceptor only if saxReceptor has been initialized.

  \param x The method of the receptor.
 */
#define SAFE_CALL_RECEPTOR(x)		\
if (saxReceptor)			\
  saxReceptor->x;



/*!
  \brief Call given method of the receptor and return its return value.
  If saxReceptor has been initialized, this macro returns the return value of its method \a x, otherwise it returns 1.

  \param x The method of the receptor.
 */
#define SAFE_CALL_RECEPTOR_RETURN(x)	\
if (saxReceptor)			\
  return saxReceptor->x;		\
else					\
  return 1;




/*!
  Initialization is performed.
 */
SAXEmitter::SAXEmitter(void)
  : SAXBase()
{
  saxReceptor = 0;
}


/*!
  Initialization is performed. Also, the saxReceptor if set.

  \param receptor Pointer to the SAX receptor.
 */
SAXEmitter::SAXEmitter(SAXReceptor *receptor)
  : SAXBase()
{
  saxReceptor = receptor;
}


/*!
  Sets the SAX receptor.

  \param receptor Pointer to the SAX receptor.
 */
void SAXEmitter::setSAXReceptor(SAXReceptor *receptor)
{
  saxReceptor = receptor;
}


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++


/*!
  Used for reporting error messages generated by Expat.
 */
void SAXEmitter::reportError(void)
{
  SAFE_CALL_RECEPTOR(reportError());
//   FATAL("SAX emitter error!");
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param name Name of the element.
  \param attr An array of attributes
 */
void SAXEmitter::startElement(void *userData, const XmlChar *name, const XmlChar **attr)
{
  SAFE_CALL_RECEPTOR(startElement(userData, name, attr));
}



/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param name Name of the element.
 */
void SAXEmitter::endElement(void *userData,
			    const XmlChar *name)
{
  SAFE_CALL_RECEPTOR(endElement(userData, name));
}





/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param data Character data.
  \param length Length of the data.
 */
void SAXEmitter::characterData(void *userData,
			       const XmlChar *data,
			       int length)
{
  SAFE_CALL_RECEPTOR(characterData(userData, data, length));
}



/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param target Target of the instruction.
  \param data Data of the instruction.
 */
void SAXEmitter::processingInstruction(void *userData,
				       const XmlChar *target,
				       const XmlChar *data)
{
  SAFE_CALL_RECEPTOR(processingInstruction(userData, target, data));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param data Data of the comment.
 */
void SAXEmitter::comment(void *userData,
			 const XmlChar *data)
{
  SAFE_CALL_RECEPTOR(comment(userData, data));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
 */
void SAXEmitter::startCDATASection(void *userData)
{
  SAFE_CALL_RECEPTOR(startCDATASection(userData));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
 */
void SAXEmitter::endCDATASection(void *userData)
{
  SAFE_CALL_RECEPTOR(endCDATASection(userData));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param data The default data.
  \param length The length of the default data.
 */
void SAXEmitter::defaultHandler(void *userData,
				const XmlChar *data,
				int length)
{
  SAFE_CALL_RECEPTOR(defaultHandler(userData, data, length));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param unknownEncodingData The data structure describing the unknown encoding.
  \param name The name of the encoding.
  \param info The information about the encoding.
 */
int SAXEmitter::unknownEncoding(void *unknownEncodingData,
				const XmlChar *name,
				XML_Encoding *info)
{
  SAFE_CALL_RECEPTOR_RETURN(unknownEncoding(unknownEncodingData, name, info));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param version The XML version string.
  \param encoding The encoding of the XML document.
  \param standalone Is the document standalone?.
 */
void SAXEmitter::xmlDecl(void *userData,
			 const XmlChar *version,
			 const XmlChar *encoding,
			 int standalone)
{
  SAFE_CALL_RECEPTOR(xmlDecl(userData, version, encoding, standalone));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param doctypeName The name of the doctype.
  \param systemId The system id.
  \param publicId The public id.
  \param hasInternalSubset Has the DTD an internal subset?
 */
void SAXEmitter::startDoctypeDecl(void *userData,
				  const XmlChar *doctypeName,
				  const XmlChar *systemId,
				  const XmlChar *publicId,
				  int hasInternalSubset)
{
  SAFE_CALL_RECEPTOR(startDoctypeDecl(userData, doctypeName, systemId, publicId, hasInternalSubset));
}



/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
 */
void SAXEmitter::endDoctypeDecl(void *userData)
{
  SAFE_CALL_RECEPTOR(endDoctypeDecl(userData));
}


/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param entityName The name of the entity.
  \param isParameterEntity Is the entity a parameter entity?
  \param value The value of the entity.
  \param valueLength The length of the value.
  \param base The base.
  \param systemId The system id.
  \param publicId The public id.
  \param notationName The name of the notation.
 */
void SAXEmitter::entityDecl(void *userData,
			    const XmlChar *entityName,
			    int isParameterEntity,
			    const XmlChar *value,
			    int valueLength,
			    const XmlChar *base,
			    const XmlChar *systemId,
			    const XmlChar *publicId,
			    const XmlChar *notationName)
{
  SAFE_CALL_RECEPTOR(entityDecl(userData, entityName, isParameterEntity, value, valueLength, base, systemId, publicId, notationName));
}



/*!
  Calls the corresponding method of the SAX receptor.

  \param userData Pointer to the user data structure.
  \param notationName The name of the notation.
  \param base The base.
  \param systemId The system id.
  \param publicId The public id.
 */
void SAXEmitter::notationDecl(void *userData,
			      const XmlChar *notationName,
			      const XmlChar *base,
			      const XmlChar *systemId,
			      const XmlChar *publicId)
{
  SAFE_CALL_RECEPTOR(notationDecl(userData, notationName, base, systemId, publicId));
}



